package tzc

import (
	"bytes"
	"github.com/ngrash/go-tz/internal/tzir"
	"github.com/ngrash/go-tz/tzif"
)

type builder struct {
	d tzif.Data
}

func (b *builder) addTransition(t tzir.Transition) {
	b.d.V2Data.TransitionTimes = append(b.d.V2Data.TransitionTimes, t.Occ)
	idx := b.addLocalTimeTypeRecord(t)
	b.d.V2Data.TransitionTypes = append(b.d.V2Data.TransitionTypes, idx)
}

func (b *builder) addLocalTimeTypeRecord(t tzir.Transition) uint8 {
	lttr := tzif.LocalTimeTypeRecord{
		Utoff: int32(t.Off),
		Dst:   t.Dst,
		Idx:   b.addDesignation(t.Desig),
	}
	// Return index of existing record.
	for i, r := range b.d.V2Data.LocalTimeTypeRecord {
		if r == lttr {
			return uint8(i)
		}
	}
	// Append new record and return its index.
	b.d.V2Data.LocalTimeTypeRecord = append(b.d.V2Data.LocalTimeTypeRecord, lttr)
	return uint8(len(b.d.V2Data.LocalTimeTypeRecord) - 1)
}

func (b *builder) addDesignation(desig string) uint8 {
	// Return index of existing designation.
	if idx := bytes.Index(b.d.V2Data.TimeZoneDesignation, append([]byte(desig), 0x00)); idx != -1 {
		return uint8(idx)
	}
	// Append new designation and return its index.
	idx := uint8(len(b.d.V2Data.TimeZoneDesignation))
	b.d.V2Data.TimeZoneDesignation = append(b.d.V2Data.TimeZoneDesignation, append([]byte(desig), 0x00)...)
	return idx
}

func (b *builder) minimalV1Compliance() {
	// For now, we only support the 'slim' tzif format as generated by `zic -b slim`.
	// That means, we skip the V1 header entirely and only place a dummy record there
	// so old programs don't crash.
	b.d.V1Header.Version = tzif.V2 // TODO: Adjust if we build V3+.
	b.d.V1Header.Typecnt = 1
	b.d.V1Header.Charcnt = 1
	b.d.V1Data.LocalTimeTypeRecord = []tzif.LocalTimeTypeRecord{{Utoff: 0, Dst: false, Idx: 0}}
	b.d.V1Data.TimeZoneDesignation = []byte{0x00}
}

func (b *builder) deriveV2HeaderFromData() {
	b.d.V2Header.Version = tzif.V2
	b.d.V2Header.Timecnt = uint32(len(b.d.V2Data.TransitionTimes))
	b.d.V2Header.Typecnt = uint32(len(b.d.V2Data.LocalTimeTypeRecord))
	b.d.V2Header.Charcnt = uint32(len(b.d.V2Data.TimeZoneDesignation))
}

func (b *builder) setFooter(tzstring string) {
	b.d.V2Footer.TZString = []byte(tzstring)
}

func (b *builder) Data() tzif.Data {
	b.d.Version = tzif.V2
	return b.d
}
